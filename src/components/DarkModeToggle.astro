---
// DarkModeToggle.astro
---

<button
  id="dark-mode-toggle"
  class="relative inline-flex items-center justify-center w-12 h-6 bg-gray-200 dark:bg-gray-700 rounded-full transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
  aria-label="Toggle dark mode"
>
  <span
    id="toggle-indicator"
    class="absolute left-1 w-4 h-4 bg-white dark:bg-gray-200 rounded-full shadow-md transform transition-transform duration-300 dark:translate-x-6"
  ></span>
  
  <!-- Sun icon -->
  <svg
    class="absolute left-1.5 w-3 h-3 text-yellow-500 opacity-100 dark:opacity-0 transition-opacity duration-300"
    fill="currentColor"
    viewBox="0 0 20 20"
  >
    <path
      fill-rule="evenodd"
      d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
      clip-rule="evenodd"
    />
  </svg>
  
  <!-- Moon icon -->
  <svg
    class="absolute right-1.5 w-3 h-3 text-gray-400 opacity-0 dark:opacity-100 transition-opacity duration-300"
    fill="currentColor"
    viewBox="0 0 20 20"
  >
    <path
      d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
    />
  </svg>
</button>

<script>
  // Dark mode toggle functionality
  function initDarkMode() {
    const toggle = document.getElementById('dark-mode-toggle');
    const html = document.documentElement;
    
    if (!toggle) {
      console.warn('Dark mode toggle button not found');
      return;
    }
    
    // Check for saved theme preference or default to system preference
    const savedTheme = localStorage.getItem('theme');
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    if (savedTheme === 'dark' || (!savedTheme && systemPrefersDark)) {
      html.classList.add('dark');
    } else {
      html.classList.remove('dark');
    }
    
    // Toggle functionality with better mobile support
    function toggleTheme(e: Event) {
      e.preventDefault();
      e.stopPropagation();
      
      if (html.classList.contains('dark')) {
        html.classList.remove('dark');
        localStorage.setItem('theme', 'light');
      } else {
        html.classList.add('dark');
        localStorage.setItem('theme', 'dark');
      }
    }
    
    // Remove existing event listeners to prevent duplicates
    toggle.removeEventListener('click', toggleTheme);
    toggle.removeEventListener('touchend', toggleTheme);
    
    // Add event listeners for both click and touch events
    toggle.addEventListener('click', toggleTheme, { passive: false });
    toggle.addEventListener('touchend', toggleTheme, { passive: false });
    
    // Listen for system theme changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      if (!localStorage.getItem('theme')) {
        if (e.matches) {
          html.classList.add('dark');
        } else {
          html.classList.remove('dark');
        }
      }
    });
  }
  
  // Initialize with multiple fallbacks for mobile compatibility
  function safeInit() {
    // Wait a bit more for mobile devices
    setTimeout(() => {
      initDarkMode();
    }, 100);
  }
  
  // Initialize on page load with multiple event listeners
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', safeInit);
  } else {
    safeInit();
  }
  
  // Re-initialize on navigation (for SPA-like behavior)
  document.addEventListener('astro:page-load', safeInit);
  
  // Additional fallback for mobile devices
  window.addEventListener('load', safeInit);
</script>